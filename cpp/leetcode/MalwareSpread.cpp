//Leetcode Problem No  924 Minimize Malware Spread
//Solution written by Xuqiang Fang on 17, Oct, 2018

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;
class Solution{
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        parents.clear();
        int n = graph.size();
        for (int i = 0; i < n; ++i) parents.push_back(i);
        for (int i = 0; i < n; ++i)
            for (int j = i + 1; j < n; ++j)
                if (graph[i][j]) uni(i, j);

        for(auto a : parents){
            cout << a << "\t";
        }
        cout << endl;
        vector<int> area(n, 0), malware(n, 0);
        for (int i = 0; i < n; ++i) area[find(i)]++;
        for(auto a : area){
            cout << a << "\t";
        }
        cout << endl;
        for (int i : initial) malware[find(i)]++;
        for(auto a : malware){
            cout << a << "\t";
        }
        cout << endl;
        vector<int> res = {1, 0};
        for (int i : initial)
            res = min(res, {(malware[find(i)] == 1 ) * (-area[find(i)]), i});
        return res[1];
    }

    int find(int x) {
        if (x != parents[x])
            parents[x] = find(parents[x]);
        return parents[x];
    }
    void uni(int x, int y) {
        parents[find(x)] = find(y);
    }
private:
    vector<int> parents;
};

int main(){
    Solution s;
    vector<vector<int>> graph{{1,1,0},{1,1,0},{0,0,1}};
    vector<int> initial{0,1};
    cout << s.minMalwareSpread(graph, initial) << endl;
    graph = {{1,1,1},{1,1,1},{1,1,1}};
    initial = {1,2};
    cout << s.minMalwareSpread(graph, initial) << endl;
    return 0;
}
